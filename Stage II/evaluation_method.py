# -*- coding: utf-8 -*-
"""Evaluation_method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X6HEfKbVKsNfmDzlh5283TptmUtIQWUk
"""

import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns

def normalize_text(text, english_only=True):
    text = text.lower().replace('\n', ' ').replace('\r', ' ')
    if english_only:
        # Keep only English letters, digits, common symbols
        text = re.sub(r"[^a-z0-9.,!?;:'\"()\[\]{}<>@#$%^&*\-_=+ ]", '', text)
    return text.strip()

def levenshtein_distance(s1, s2):
    if len(s1) < len(s2):
        return levenshtein_distance(s2, s1)
    if len(s2) == 0:
        return len(s1)
    previous_row = list(range(len(s2) + 1))
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    return previous_row[-1]

def cer(gt, pred):
    if not gt:
        return 1.0 if pred else 0.0
    return levenshtein_distance(gt, pred) / len(gt)

def wer(gt, pred):
    gt_words = gt.split()
    pred_words = pred.split()
    return levenshtein_distance(gt_words, pred_words) / len(gt_words) if gt_words else 1.0

def EvaluateOCR(csv_name, gt_colname, detected_colname, mode="CER", english_only=True, visualize=False):
    df = pd.read_csv(csv_name)
    gt_texts = df[gt_colname].fillna("").map(lambda x: normalize_text(x, english_only))
    pred_texts = df[detected_colname].fillna("").map(lambda x: normalize_text(x, english_only))

    scores = []
    for gt, pred in zip(gt_texts, pred_texts):
        if mode == "CER":
            score = cer(gt, pred)
        elif mode == "WER":
            score = wer(gt, pred)
        elif mode == "LEV":
            score = levenshtein_distance(gt, pred)
        else:
            raise ValueError("Mode must be 'CER', 'WER', or 'LEV'")
        scores.append(score)

    avg_score = sum(scores) / len(scores)
    print(f"{mode} (English only = {english_only}): {avg_score}")

    if visualize:
        sns.histplot(scores, bins=20, kde=True, color='coral')
        plt.title(f'{mode} Distribution')
        plt.xlabel(mode)
        plt.ylabel('Frequency')
        plt.grid(True)
        plt.show()

    return avg_score, scores

EvaluateOCR("Qwen3b_GT - Sheet1.csv", "Human-recognized Text", "recognized_text", mode="CER", english_only=True, visualize=True)